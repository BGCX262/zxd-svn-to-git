//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace ZxdFramework.Service.IM {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="States", Namespace="http://schemas.datacontract.org/2004/07/ZxdFramework.DataContract.IM")]
    public enum States : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        在线 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        离线 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        隐身 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        请勿打扰 = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        忙碌 = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Q我 = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IMUser", Namespace="http://schemas.datacontract.org/2004/07/ZxdFramework.DataContract.IM")]
    public partial class IMUser : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<ZxdFramework.Service.IM.IMUserGroup> GroupsField;
        
        private System.Guid IdField;
        
        private string TcpAddressField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ZxdFramework.Service.IM.IMUserGroup> Groups {
            get {
                return this.GroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupsField, value) != true)) {
                    this.GroupsField = value;
                    this.RaisePropertyChanged("Groups");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TcpAddress {
            get {
                return this.TcpAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.TcpAddressField, value) != true)) {
                    this.TcpAddressField = value;
                    this.RaisePropertyChanged("TcpAddress");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IMUserGroup", Namespace="http://schemas.datacontract.org/2004/07/ZxdFramework.DataContract.IM")]
    public partial class IMUserGroup : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string IconField;
        
        private System.Guid IdField;
        
        private System.Collections.ObjectModel.ObservableCollection<ZxdFramework.Service.IM.IMUserSetting> MembersField;
        
        private string NameField;
        
        private ZxdFramework.Service.IM.IMUser OwnerField;
        
        private ZxdFramework.Service.IM.IMGroupTypes TypeField;
        
        private System.DateTime UpdateTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Icon {
            get {
                return this.IconField;
            }
            set {
                if ((object.ReferenceEquals(this.IconField, value) != true)) {
                    this.IconField = value;
                    this.RaisePropertyChanged("Icon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ZxdFramework.Service.IM.IMUserSetting> Members {
            get {
                return this.MembersField;
            }
            set {
                if ((object.ReferenceEquals(this.MembersField, value) != true)) {
                    this.MembersField = value;
                    this.RaisePropertyChanged("Members");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ZxdFramework.Service.IM.IMUser Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ZxdFramework.Service.IM.IMGroupTypes Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UpdateTime {
            get {
                return this.UpdateTimeField;
            }
            set {
                if ((this.UpdateTimeField.Equals(value) != true)) {
                    this.UpdateTimeField = value;
                    this.RaisePropertyChanged("UpdateTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IMUserSetting", Namespace="http://schemas.datacontract.org/2004/07/ZxdFramework.DataContract.IM")]
    public partial class IMUserSetting : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid IdField;
        
        private bool IsScriptSupportField;
        
        private string NameField;
        
        private string SigningField;
        
        private ZxdFramework.Service.IM.States StateField;
        
        private System.DateTime UpdateTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsScriptSupport {
            get {
                return this.IsScriptSupportField;
            }
            set {
                if ((this.IsScriptSupportField.Equals(value) != true)) {
                    this.IsScriptSupportField = value;
                    this.RaisePropertyChanged("IsScriptSupport");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Signing {
            get {
                return this.SigningField;
            }
            set {
                if ((object.ReferenceEquals(this.SigningField, value) != true)) {
                    this.SigningField = value;
                    this.RaisePropertyChanged("Signing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ZxdFramework.Service.IM.States State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UpdateTime {
            get {
                return this.UpdateTimeField;
            }
            set {
                if ((this.UpdateTimeField.Equals(value) != true)) {
                    this.UpdateTimeField = value;
                    this.RaisePropertyChanged("UpdateTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IMGroupTypes", Namespace="http://schemas.datacontract.org/2004/07/ZxdFramework.DataContract.IM")]
    public enum IMGroupTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        自己 = -1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Common = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        群 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        讨论组 = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/ZxdFramework.DataContract.IM")]
    public partial class Message : object, System.ComponentModel.INotifyPropertyChanged {
        
        private byte[] ContentField;
        
        private string DataField;
        
        private System.Guid OwnerField;
        
        private string ScriptField;
        
        private System.Guid ToField;
        
        private int TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((this.OwnerField.Equals(value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Script {
            get {
                return this.ScriptField;
            }
            set {
                if ((object.ReferenceEquals(this.ScriptField, value) != true)) {
                    this.ScriptField = value;
                    this.RaisePropertyChanged("Script");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid To {
            get {
                return this.ToField;
            }
            set {
                if ((this.ToField.Equals(value) != true)) {
                    this.ToField = value;
                    this.RaisePropertyChanged("To");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IMCommand", Namespace="http://schemas.datacontract.org/2004/07/ZxdFramework.DataContract.IM")]
    public partial class IMCommand : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private System.Guid OwnerField;
        
        private string ScriptField;
        
        private ZxdFramework.Service.IM.CommandTypes TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((this.OwnerField.Equals(value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Script {
            get {
                return this.ScriptField;
            }
            set {
                if ((object.ReferenceEquals(this.ScriptField, value) != true)) {
                    this.ScriptField = value;
                    this.RaisePropertyChanged("Script");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ZxdFramework.Service.IM.CommandTypes Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommandTypes", Namespace="http://schemas.datacontract.org/2004/07/ZxdFramework.DataContract.IM")]
    public enum CommandTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        添加用户 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        删除用户 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        创建对话 = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IM.IIMService", CallbackContract=typeof(ZxdFramework.Service.IM.IIMServiceCallback))]
    public interface IIMService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IIMService/Join", ReplyAction="http://tempuri.org/IIMService/JoinResponse")]
        System.IAsyncResult BeginJoin(System.Guid userid, ZxdFramework.Service.IM.States state, System.AsyncCallback callback, object asyncState);
        
        ZxdFramework.Service.IM.IMUser EndJoin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IIMService/OffLine", ReplyAction="http://tempuri.org/IIMService/OffLineResponse")]
        System.IAsyncResult BeginOffLine(System.Guid userid, System.AsyncCallback callback, object asyncState);
        
        void EndOffLine(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IIMService/SentMessage", ReplyAction="http://tempuri.org/IIMService/SentMessageResponse")]
        System.IAsyncResult BeginSentMessage(ZxdFramework.Service.IM.Message message, System.AsyncCallback callback, object asyncState);
        
        void EndSentMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IIMService/SentCommand", ReplyAction="http://tempuri.org/IIMService/SentCommandResponse")]
        System.IAsyncResult BeginSentCommand(ZxdFramework.Service.IM.IMCommand command, System.AsyncCallback callback, object asyncState);
        
        void EndSentCommand(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IIMService/ChangeSetting", ReplyAction="http://tempuri.org/IIMService/ChangeSettingResponse")]
        System.IAsyncResult BeginChangeSetting(ZxdFramework.Service.IM.IMUserSetting setting, System.AsyncCallback callback, object asyncState);
        
        void EndChangeSetting(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IIMServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IIMService/ReceiveMessage")]
        void ReceiveMessage(ZxdFramework.Service.IM.Message message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IIMService/ReceiveCommand")]
        void ReceiveCommand(ZxdFramework.Service.IM.IMCommand command);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IIMService/UserChanged")]
        void UserChanged(ZxdFramework.Service.IM.IMUserSetting user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IIMServiceChannel : ZxdFramework.Service.IM.IIMService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JoinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public JoinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ZxdFramework.Service.IM.IMUser Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ZxdFramework.Service.IM.IMUser)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IMServiceClient : System.ServiceModel.DuplexClientBase<ZxdFramework.Service.IM.IIMService>, ZxdFramework.Service.IM.IIMService {
        
        private BeginOperationDelegate onBeginJoinDelegate;
        
        private EndOperationDelegate onEndJoinDelegate;
        
        private System.Threading.SendOrPostCallback onJoinCompletedDelegate;
        
        private BeginOperationDelegate onBeginOffLineDelegate;
        
        private EndOperationDelegate onEndOffLineDelegate;
        
        private System.Threading.SendOrPostCallback onOffLineCompletedDelegate;
        
        private BeginOperationDelegate onBeginSentMessageDelegate;
        
        private EndOperationDelegate onEndSentMessageDelegate;
        
        private System.Threading.SendOrPostCallback onSentMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginSentCommandDelegate;
        
        private EndOperationDelegate onEndSentCommandDelegate;
        
        private System.Threading.SendOrPostCallback onSentCommandCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeSettingDelegate;
        
        private EndOperationDelegate onEndChangeSettingDelegate;
        
        private System.Threading.SendOrPostCallback onChangeSettingCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public IMServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public IMServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public IMServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public IMServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public IMServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public IMServiceClient(string endpointConfigurationName) : 
                this(new IMServiceClientCallback(), endpointConfigurationName) {
        }
        
        private IMServiceClient(IMServiceClientCallback callbackImpl, string endpointConfigurationName) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfigurationName) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public IMServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new IMServiceClientCallback(), binding, remoteAddress) {
        }
        
        private IMServiceClient(IMServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public IMServiceClient() : 
                this(new IMServiceClientCallback()) {
        }
        
        private IMServiceClient(IMServiceClientCallback callbackImpl) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl)) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<JoinCompletedEventArgs> JoinCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OffLineCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SentMessageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SentCommandCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ChangeSettingCompleted;
        
        public event System.EventHandler<ReceiveMessageReceivedEventArgs> ReceiveMessageReceived;
        
        public event System.EventHandler<ReceiveCommandReceivedEventArgs> ReceiveCommandReceived;
        
        public event System.EventHandler<UserChangedReceivedEventArgs> UserChangedReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ZxdFramework.Service.IM.IIMService.BeginJoin(System.Guid userid, ZxdFramework.Service.IM.States state, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginJoin(userid, state, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ZxdFramework.Service.IM.IMUser ZxdFramework.Service.IM.IIMService.EndJoin(System.IAsyncResult result) {
            return base.Channel.EndJoin(result);
        }
        
        private System.IAsyncResult OnBeginJoin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid userid = ((System.Guid)(inValues[0]));
            ZxdFramework.Service.IM.States state = ((ZxdFramework.Service.IM.States)(inValues[1]));
            return ((ZxdFramework.Service.IM.IIMService)(this)).BeginJoin(userid, state, callback, asyncState);
        }
        
        private object[] OnEndJoin(System.IAsyncResult result) {
            ZxdFramework.Service.IM.IMUser retVal = ((ZxdFramework.Service.IM.IIMService)(this)).EndJoin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnJoinCompleted(object state) {
            if ((this.JoinCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.JoinCompleted(this, new JoinCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void JoinAsync(System.Guid userid, ZxdFramework.Service.IM.States state) {
            this.JoinAsync(userid, state, null);
        }
        
        public void JoinAsync(System.Guid userid, ZxdFramework.Service.IM.States state, object userState) {
            if ((this.onBeginJoinDelegate == null)) {
                this.onBeginJoinDelegate = new BeginOperationDelegate(this.OnBeginJoin);
            }
            if ((this.onEndJoinDelegate == null)) {
                this.onEndJoinDelegate = new EndOperationDelegate(this.OnEndJoin);
            }
            if ((this.onJoinCompletedDelegate == null)) {
                this.onJoinCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnJoinCompleted);
            }
            base.InvokeAsync(this.onBeginJoinDelegate, new object[] {
                        userid,
                        state}, this.onEndJoinDelegate, this.onJoinCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ZxdFramework.Service.IM.IIMService.BeginOffLine(System.Guid userid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOffLine(userid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ZxdFramework.Service.IM.IIMService.EndOffLine(System.IAsyncResult result) {
            base.Channel.EndOffLine(result);
        }
        
        private System.IAsyncResult OnBeginOffLine(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid userid = ((System.Guid)(inValues[0]));
            return ((ZxdFramework.Service.IM.IIMService)(this)).BeginOffLine(userid, callback, asyncState);
        }
        
        private object[] OnEndOffLine(System.IAsyncResult result) {
            ((ZxdFramework.Service.IM.IIMService)(this)).EndOffLine(result);
            return null;
        }
        
        private void OnOffLineCompleted(object state) {
            if ((this.OffLineCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OffLineCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OffLineAsync(System.Guid userid) {
            this.OffLineAsync(userid, null);
        }
        
        public void OffLineAsync(System.Guid userid, object userState) {
            if ((this.onBeginOffLineDelegate == null)) {
                this.onBeginOffLineDelegate = new BeginOperationDelegate(this.OnBeginOffLine);
            }
            if ((this.onEndOffLineDelegate == null)) {
                this.onEndOffLineDelegate = new EndOperationDelegate(this.OnEndOffLine);
            }
            if ((this.onOffLineCompletedDelegate == null)) {
                this.onOffLineCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOffLineCompleted);
            }
            base.InvokeAsync(this.onBeginOffLineDelegate, new object[] {
                        userid}, this.onEndOffLineDelegate, this.onOffLineCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ZxdFramework.Service.IM.IIMService.BeginSentMessage(ZxdFramework.Service.IM.Message message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSentMessage(message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ZxdFramework.Service.IM.IIMService.EndSentMessage(System.IAsyncResult result) {
            base.Channel.EndSentMessage(result);
        }
        
        private System.IAsyncResult OnBeginSentMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            ZxdFramework.Service.IM.Message message = ((ZxdFramework.Service.IM.Message)(inValues[0]));
            return ((ZxdFramework.Service.IM.IIMService)(this)).BeginSentMessage(message, callback, asyncState);
        }
        
        private object[] OnEndSentMessage(System.IAsyncResult result) {
            ((ZxdFramework.Service.IM.IIMService)(this)).EndSentMessage(result);
            return null;
        }
        
        private void OnSentMessageCompleted(object state) {
            if ((this.SentMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SentMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SentMessageAsync(ZxdFramework.Service.IM.Message message) {
            this.SentMessageAsync(message, null);
        }
        
        public void SentMessageAsync(ZxdFramework.Service.IM.Message message, object userState) {
            if ((this.onBeginSentMessageDelegate == null)) {
                this.onBeginSentMessageDelegate = new BeginOperationDelegate(this.OnBeginSentMessage);
            }
            if ((this.onEndSentMessageDelegate == null)) {
                this.onEndSentMessageDelegate = new EndOperationDelegate(this.OnEndSentMessage);
            }
            if ((this.onSentMessageCompletedDelegate == null)) {
                this.onSentMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSentMessageCompleted);
            }
            base.InvokeAsync(this.onBeginSentMessageDelegate, new object[] {
                        message}, this.onEndSentMessageDelegate, this.onSentMessageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ZxdFramework.Service.IM.IIMService.BeginSentCommand(ZxdFramework.Service.IM.IMCommand command, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSentCommand(command, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ZxdFramework.Service.IM.IIMService.EndSentCommand(System.IAsyncResult result) {
            base.Channel.EndSentCommand(result);
        }
        
        private System.IAsyncResult OnBeginSentCommand(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            ZxdFramework.Service.IM.IMCommand command = ((ZxdFramework.Service.IM.IMCommand)(inValues[0]));
            return ((ZxdFramework.Service.IM.IIMService)(this)).BeginSentCommand(command, callback, asyncState);
        }
        
        private object[] OnEndSentCommand(System.IAsyncResult result) {
            ((ZxdFramework.Service.IM.IIMService)(this)).EndSentCommand(result);
            return null;
        }
        
        private void OnSentCommandCompleted(object state) {
            if ((this.SentCommandCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SentCommandCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SentCommandAsync(ZxdFramework.Service.IM.IMCommand command) {
            this.SentCommandAsync(command, null);
        }
        
        public void SentCommandAsync(ZxdFramework.Service.IM.IMCommand command, object userState) {
            if ((this.onBeginSentCommandDelegate == null)) {
                this.onBeginSentCommandDelegate = new BeginOperationDelegate(this.OnBeginSentCommand);
            }
            if ((this.onEndSentCommandDelegate == null)) {
                this.onEndSentCommandDelegate = new EndOperationDelegate(this.OnEndSentCommand);
            }
            if ((this.onSentCommandCompletedDelegate == null)) {
                this.onSentCommandCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSentCommandCompleted);
            }
            base.InvokeAsync(this.onBeginSentCommandDelegate, new object[] {
                        command}, this.onEndSentCommandDelegate, this.onSentCommandCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ZxdFramework.Service.IM.IIMService.BeginChangeSetting(ZxdFramework.Service.IM.IMUserSetting setting, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeSetting(setting, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ZxdFramework.Service.IM.IIMService.EndChangeSetting(System.IAsyncResult result) {
            base.Channel.EndChangeSetting(result);
        }
        
        private System.IAsyncResult OnBeginChangeSetting(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            ZxdFramework.Service.IM.IMUserSetting setting = ((ZxdFramework.Service.IM.IMUserSetting)(inValues[0]));
            return ((ZxdFramework.Service.IM.IIMService)(this)).BeginChangeSetting(setting, callback, asyncState);
        }
        
        private object[] OnEndChangeSetting(System.IAsyncResult result) {
            ((ZxdFramework.Service.IM.IIMService)(this)).EndChangeSetting(result);
            return null;
        }
        
        private void OnChangeSettingCompleted(object state) {
            if ((this.ChangeSettingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeSettingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeSettingAsync(ZxdFramework.Service.IM.IMUserSetting setting) {
            this.ChangeSettingAsync(setting, null);
        }
        
        public void ChangeSettingAsync(ZxdFramework.Service.IM.IMUserSetting setting, object userState) {
            if ((this.onBeginChangeSettingDelegate == null)) {
                this.onBeginChangeSettingDelegate = new BeginOperationDelegate(this.OnBeginChangeSetting);
            }
            if ((this.onEndChangeSettingDelegate == null)) {
                this.onEndChangeSettingDelegate = new EndOperationDelegate(this.OnEndChangeSetting);
            }
            if ((this.onChangeSettingCompletedDelegate == null)) {
                this.onChangeSettingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeSettingCompleted);
            }
            base.InvokeAsync(this.onBeginChangeSettingDelegate, new object[] {
                        setting}, this.onEndChangeSettingDelegate, this.onChangeSettingCompletedDelegate, userState);
        }
        
        private void OnReceiveMessageReceived(object state) {
            if ((this.ReceiveMessageReceived != null)) {
                object[] results = ((object[])(state));
                this.ReceiveMessageReceived(this, new ReceiveMessageReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnReceiveCommandReceived(object state) {
            if ((this.ReceiveCommandReceived != null)) {
                object[] results = ((object[])(state));
                this.ReceiveCommandReceived(this, new ReceiveCommandReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnUserChangedReceived(object state) {
            if ((this.UserChangedReceived != null)) {
                object[] results = ((object[])(state));
                this.UserChangedReceived(this, new UserChangedReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && (((this.ReceiveMessageReceived != null) 
                        || (this.ReceiveCommandReceived != null)) 
                        || (this.UserChangedReceived != null)))) {
                throw new System.InvalidOperationException("Callback events cannot be used when the callback InstanceContext is specified. Pl" +
                        "ease choose between specifying the callback InstanceContext or subscribing to th" +
                        "e callback events.");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ZxdFramework.Service.IM.IIMService CreateChannel() {
            return new IMServiceClientChannel(this);
        }
        
        private class IMServiceClientCallback : object, IIMServiceCallback {
            
            private IMServiceClient proxy;
            
            public void Initialize(IMServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void ReceiveMessage(ZxdFramework.Service.IM.Message message) {
                this.proxy.OnReceiveMessageReceived(new object[] {
                            message});
            }
            
            public void ReceiveCommand(ZxdFramework.Service.IM.IMCommand command) {
                this.proxy.OnReceiveCommandReceived(new object[] {
                            command});
            }
            
            public void UserChanged(ZxdFramework.Service.IM.IMUserSetting user) {
                this.proxy.OnUserChangedReceived(new object[] {
                            user});
            }
        }
        
        private class IMServiceClientChannel : ChannelBase<ZxdFramework.Service.IM.IIMService>, ZxdFramework.Service.IM.IIMService {
            
            public IMServiceClientChannel(System.ServiceModel.DuplexClientBase<ZxdFramework.Service.IM.IIMService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginJoin(System.Guid userid, ZxdFramework.Service.IM.States state, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userid;
                _args[1] = state;
                System.IAsyncResult _result = base.BeginInvoke("Join", _args, callback, asyncState);
                return _result;
            }
            
            public ZxdFramework.Service.IM.IMUser EndJoin(System.IAsyncResult result) {
                object[] _args = new object[0];
                ZxdFramework.Service.IM.IMUser _result = ((ZxdFramework.Service.IM.IMUser)(base.EndInvoke("Join", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginOffLine(System.Guid userid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userid;
                System.IAsyncResult _result = base.BeginInvoke("OffLine", _args, callback, asyncState);
                return _result;
            }
            
            public void EndOffLine(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("OffLine", _args, result);
            }
            
            public System.IAsyncResult BeginSentMessage(ZxdFramework.Service.IM.Message message, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = message;
                System.IAsyncResult _result = base.BeginInvoke("SentMessage", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSentMessage(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SentMessage", _args, result);
            }
            
            public System.IAsyncResult BeginSentCommand(ZxdFramework.Service.IM.IMCommand command, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = command;
                System.IAsyncResult _result = base.BeginInvoke("SentCommand", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSentCommand(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SentCommand", _args, result);
            }
            
            public System.IAsyncResult BeginChangeSetting(ZxdFramework.Service.IM.IMUserSetting setting, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = setting;
                System.IAsyncResult _result = base.BeginInvoke("ChangeSetting", _args, callback, asyncState);
                return _result;
            }
            
            public void EndChangeSetting(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ChangeSetting", _args, result);
            }
        }
    }
    
    public class ReceiveMessageReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReceiveMessageReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ZxdFramework.Service.IM.Message message {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ZxdFramework.Service.IM.Message)(this.results[0]));
            }
        }
    }
    
    public class ReceiveCommandReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReceiveCommandReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ZxdFramework.Service.IM.IMCommand command {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ZxdFramework.Service.IM.IMCommand)(this.results[0]));
            }
        }
    }
    
    public class UserChangedReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UserChangedReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ZxdFramework.Service.IM.IMUserSetting user {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ZxdFramework.Service.IM.IMUserSetting)(this.results[0]));
            }
        }
    }
}
